{"version":3,"sources":["assets/images/footer.jpg","assets/images/hexad-small-logo.png","components/card/Card.tsx","components/logo/Logo.tsx","components/footer/Footer.tsx","components/header/Header.tsx","service/GameService.ts","containers/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","root","width","margin","fontFamily","media","height","rating","display","justifyContent","AppCard","props","name","image","React","useState","value","setValue","classes","Card","className","CardHeader","style","title","CardMedia","CardContent","Rating","size","onChange","event","newValue","Logo","Box","marginBottom","alt","src","logo","Footer","backgroundImage","footerImage","alignItems","flexDirection","marginTop","padding","Typography","Header","Fragment","fontSize","marginRight","variant","component","GameService","buttonActive$","Subject","gameList$","BehaviorSubject","initialState","this","_instance","getInstance","MainPage","state","games","onDestroy","pipe","takeUntil","subscribe","setState","next","Container","maxWidth","flexWrap","map","game","index","key","Component","App","createMuiTheme","typography","ThemeProvider","CssBaseline","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d64110a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/footer.909d5f54.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hexad-small-logo.cf77f030.png\";","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardMedia,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport React from 'react';\r\nimport { IGame } from './../../service/GameService';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '18rem',\r\n    margin: '0.5rem',\r\n    fontFamily: 'Montserrat'\r\n  },\r\n  media: {\r\n    height: '25rem',\r\n    margin: '0 -7% 0 -7%'\r\n  },\r\n  rating: {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  }\r\n}));\r\n\r\nexport const AppCard = (props: IGame): JSX.Element => {\r\n  const { name, rating, image } = props;\r\n\r\n  const [value, setValue] = React.useState(rating);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        style={{\r\n          height: '6rem'\r\n        }}\r\n        title={name}\r\n      />\r\n      <CardMedia className={classes.media} image={image} title={name} />\r\n      <CardContent>\r\n        <Rating\r\n          name={image}\r\n          size='large'\r\n          value={value}\r\n          className={classes.rating}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue ?? value);\r\n          }}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react';\r\nimport logo from '../../assets/images/hexad-small-logo.png';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <Box\r\n      style={{\r\n        marginBottom: '1rem'\r\n      }}\r\n    >\r\n      <img\r\n        className='app-logo'\r\n        alt={'logo'}\r\n        style={{\r\n          height: '3rem',\r\n          width: '3rem'\r\n        }}\r\n        src={logo}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport footerImage from '../../assets/images/footer.jpg';\r\nimport { Logo } from '../logo';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Box\r\n      style={{\r\n        backgroundImage: `url(${footerImage})`,\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        marginTop: '1rem',\r\n        padding: '5rem 0'\r\n      }}\r\n    >\r\n      <Logo />\r\n      <Typography>Porschestra√üe 58, 38440,</Typography>\r\n      <Typography>Wolfsburg, Germany</Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport { default as SportsEsportsIcon } from '@material-ui/icons/SportsEsports';\r\nimport React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Box\r\n      style={{\r\n        padding: '1rem',\r\n        display: 'flex'\r\n      }}\r\n    >\r\n      <React.Fragment>\r\n        <SportsEsportsIcon\r\n          style={{\r\n            fontSize: '2rem',\r\n            marginRight: '1rem'\r\n          }}\r\n        />\r\n        <Typography variant='h4' component='h4'>\r\n          Rating Games Assignment ;)\r\n        </Typography>\r\n      </React.Fragment>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { BehaviorSubject, Subject } from 'rxjs';\r\n\r\nimport initialState from '../mock_data/game_list.json';\r\n\r\nexport interface IGame {\r\n  name: string;\r\n  image: string;\r\n  rating: number;\r\n}\r\n\r\ninterface IGameService {\r\n  buttonActive$: Subject<boolean>;\r\n  gameList$: BehaviorSubject<IGame[]>;\r\n\r\n  shuffle(): void;\r\n}\r\n\r\nclass GameService implements IGameService {\r\n  public buttonActive$ = new Subject<boolean>();\r\n  public gameList$: BehaviorSubject<IGame[]> = new BehaviorSubject<IGame[]>(\r\n    initialState\r\n  );\r\n\r\n  private static _instance = new GameService();\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): IGameService {\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  shuffle(): void {}\r\n}\r\n\r\nexport default GameService.getInstance();\r\n","import { Box } from '@material-ui/core';\r\nimport Container from '@material-ui/core/Container';\r\nimport React from 'react';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AppCard, Footer, Header } from '../components';\r\nimport { GameService, IGame } from '../service';\r\n\r\nexport default class MainPage extends React.Component<\r\n  {},\r\n  { games: IGame[]; onDestroy: Subject<void> }\r\n> {\r\n  state = {\r\n    games: [],\r\n    onDestroy: new Subject<void>()\r\n  };\r\n\r\n  public componentDidMount(): void {\r\n    GameService.gameList$\r\n      .pipe(takeUntil(this.state.onDestroy))\r\n      .subscribe((games: IGame[]): void => {\r\n        this.setState(state => {\r\n          return {\r\n            ...state,\r\n            games\r\n          };\r\n        });\r\n      });\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this.state.onDestroy.next();\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <Container maxWidth='xl'>\r\n        <Header />\r\n        <Box\r\n          style={{\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'center'\r\n          }}\r\n        >\r\n          {this.state.games.map((game: IGame, index: number) => (\r\n            <AppCard {...game} key={index} />\r\n          ))}\r\n        </Box>\r\n        <Footer />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport { MainPage } from './containers';\n\nclass App extends React.Component {\n  render(): JSX.Element {\n    const theme = createMuiTheme({\n      typography: {\n        fontFamily: 'Dosis'\n      }\n    });\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <MainPage data-testid='main-page' />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}